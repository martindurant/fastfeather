# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers

# /// Same as Binary, but with 64-bit offsets, allowing to represent
# /// extremely large data values.
class LargeBinary(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLargeBinary(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LargeBinary()
        x.Init(buf, n + offset)
        return x

    # LargeBinary
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def LargeBinaryStart(builder): builder.StartObject(0)
def LargeBinaryEnd(builder): return builder.EndObject()
